=== test_cpu_coroutine
--- main.n
import co

fn test_cpu_calc() {
    int count = 0
    for true {
        count += 1
    }
}

fn main() {
    go test_cpu_calc()

    for int i = 0; i < 10; i+=1 {
        println('hello world')
        co.sleep(500)
    }
}

--- output.txt
hello world
hello world
hello world
hello world
hello world
hello world
hello world
hello world
hello world
hello world


=== test_cpu_calc2
--- main.n
import co
import runtime

fn test_cpu_calc() {
    int count = 0
    for true {
        count += 1
    }
}

fn main() {
    go test_cpu_calc()

    // allocate big memoory
    var data = vec_new<i64>(0, 1024000)
    var start = runtime.malloc_bytes()
    println('allocate bytes:', start)
    assert(start > 8000000)

    for int i = 0; i < 10; i+=1 {
        println('hello world')
        co.sleep(100)
    }
    var end = runtime.malloc_bytes() // gc timeout, cannot gc
    println('allocate bytes:', end)
    assert(end > 8000000)
}

=== test_coroutine_gc
--- main.n
import co
import runtime

fn test_cpu_calc() {
    int count = 0
    for true {
        count += 1
        co.yield()
    }
}

fn main() {
    go test_cpu_calc()

    // allocate big memoory
    var data = vec_new<i64>(0, 1024000)
    var start = runtime.malloc_bytes()
    println('allocate bytes:', start)
    assert(start > 8000000)

    for int i = 0; i < 10; i+=1 {
        println('hello world')
        co.sleep(100)
    }
    var end = runtime.malloc_bytes() // gc timeout, cannot gc
    println('allocate bytes:', end, data.len())
    assert(end > 8000000)
}

=== test_coroutine_gc_safepoint
--- main.n
import co
import runtime

fn test_break() {

}

fn test_cpu_calc() {
    int count = 0
    for true {
        test_break()
        count += 1
    }
}

fn alloc() {
   var data1 = vec_new<i64>(0, 10240)
   var data2 = vec_new<i64>(0, 10240)
   var data3 = vec_new<i64>(0, 10240)
   var data4 = vec_new<i64>(0, 10240)
   var data5 = vec_new<i64>(0, 10240)
   var data6 = vec_new<i64>(0, 10240)
   var data7 = vec_new<i64>(0, 10240)
   var data8 = vec_new<i64>(0, 10240)
   var data9 = vec_new<i64>(0, 10240)
   var data10 = vec_new<i64>(0, 10240)
}

fn main() {
    go test_cpu_calc()

    // allocate big memoory
    alloc()
    var start = runtime.malloc_bytes()
    println('allocate bytes:', start)
    // assert(start > 8000000)

    for int i = 0; i < 10; i+=1 {
        println('hello world')
        co.sleep(100)
    }
    var end = runtime.malloc_bytes() // gc timeout, cannot gc
    println('allocate bytes:', end)
    // assert(end < 10000)
}



=== test_scan_stack
--- main.n
import runtime
import co

fn test_break() {
}

fn car() {
    test_break()
    var b = vec_new<int>(0, 1024)
    var c = 111
    var d = vec_new<int>(0, 1024)
    var e = 222
    var f = vec_new<float>(0, 1024)
    var before = runtime.malloc_bytes()
    println(before)
    assert(before > 50000)
    co.sleep(1000) // 等待 GC 完成，由于存在引用, 所以无法清理
    var after = runtime.malloc_bytes()
    println(after)
    assert(after > 30000)
}

fn bar() {
    test_break()
    var b = vec_new<int>(0, 1024)
    var c = 111
    var d = vec_new<int>(0, 1024)
    var e = 222
    var f = vec_new<float>(0, 1024)
    car()
    var g = b[0] + c + d[0] + e + f[0] as int
}

fn foo() {
    test_break()
    var a1 = 1
    var a2 = 1
    var a3 = 1
    var a4 = 1
    var a5 = 1
    var a6 = 1
    var a7 = 1
    var a8 = 1
    var a9 = 1
    var a10 = 1
    var a11 = 1
    var a12 = 1
    var b = vec_new<int>(0, 1024)
    var c = 111
    var d = vec_new<int>(0, 1024)
    bar()
    var e = 222
    var f = vec_new<float>(0, 1024)
    var g = a1 + a2 + a3 + a4 + a5 + a6 + a7 + a8 + a9 + a10 + a11 + a12 + b[0] + c + d[0] + e + f[0] as int
}

fn main() {
    runtime.gc()
    foo()
}

=== test_gc_stack_in_runtime
--- main.n
import runtime
import co

#linkid test_gc_sleep_yield
fn test_gc_sleep_yield()

fn test_break() {
}

fn car() {
    test_break()
    var b = vec_new<int>(0, 1024)
    var c = 111
    var d = vec_new<int>(0, 1024)
    var e = 222
    var f = vec_new<float>(0, 1024)
    var before = runtime.malloc_bytes()
    println(before)
    assert(before > 50000)

    test_gc_sleep_yield() // 等待 GC 完成，由于存在引用, 所以无法清理

    var after = runtime.malloc_bytes()
    println(after)
    assert(after > 30000)
}

fn bar() {
    test_break()
    var b = vec_new<int>(0, 1024)
    var c = 111
    var d = vec_new<int>(0, 1024)
    var e = 222
    var f = vec_new<float>(0, 1024)
    car()
    var g = b[0] + c + d[0] + e + f[0] as int
}

fn foo() {
    test_break()
    var a1 = 1
    var a2 = 1
    var a3 = 1
    var a4 = 1
    var a5 = 1
    var a6 = 1
    var a7 = 1
    var a8 = 1
    var a9 = 1
    var a10 = 1
    var a11 = 1
    var a12 = 1
    var b = vec_new<int>(0, 1024)
    var c = 111
    var d = vec_new<int>(0, 1024)
    bar()
    var e = 222
    var f = vec_new<float>(0, 1024)
    var g = a1 + a2 + a3 + a4 + a5 + a6 + a7 + a8 + a9 + a10 + a11 + a12 + b[0] + c + d[0] + e + f[0] as int
}

fn main() {
    runtime.gc()
    foo()
}


=== test_tls
--- main.n
import runtime
import co

#linkid test_gc_sleep_yield
fn test_gc_sleep_yield()

#linkid init_safepoint
fn init_safepoint(int v)

#linkid get_safepoint
fn get_safepoint():int

fn test_tls_set() {
    init_safepoint(22)
}

fn test_tls_print() {
    test_tls_set()
    co.sleep(1000) // 等待 main 赋值完成
    println('sub tls value: ', get_safepoint())
    assert(get_safepoint() == 22)
}


fn main() {
    init_safepoint(11)
    go test_tls_print()
    co.sleep(1500) // 等待 set 完成
    println('main tls value: ', get_safepoint())
    assert(get_safepoint() == 11)
}

=== test_safepoint
--- main.n
import runtime
import co

fn test_break() {
}

fn test_increase(int i):int {
    return i + 1
}

fn car() {
    println('entry car-----------')
    test_break()
    var b = vec_new<int>(0, 1024)
    var c = 111
    var d = vec_new<int>(0, 1024)
    var e = 222
    var f = vec_new<float>(0, 1024)
    var before = runtime.malloc_bytes()
    println(before)
    assert(before > 50000)

    int i = 0
    for true {
        i = test_increase(i)
    }
    var g = b[0] + c + d[0] + e + f[0] as int
    var g2 = b[0] + c + d[0] + e + f[0] as int
}

fn bar() {
    test_break()
    var b = vec_new<int>(0, 1024)
    var c = 111
    var d = vec_new<int>(0, 1024)
    var e = 222
    var f = vec_new<float>(0, 1024)
    car()
    var g = b[0] + c + d[0] + e + f[0] as int
}

fn foo() {
    test_break()
    var a1 = 1
    var a2 = 1
    var a3 = 1
    var a4 = 1
    var a5 = 1
    var a6 = 1
    var a7 = 1
    var a8 = 1
    var a9 = 1
    var a10 = 1
    var a11 = 1
    var a12 = 1
    var b = vec_new<int>(0, 1024)
    var c = 111
    var d = vec_new<int>(0, 1024)
    bar()
    var e = 222
    var f = vec_new<float>(0, 1024)
    var g = a1 + a2 + a3 + a4 + a5 + a6 + a7 + a8 + a9 + a10 + a11 + a12 + b[0] + c + d[0] + e + f[0] as int
}

fn main() {
    @async(foo(), 0)
    runtime.gc()
    co.sleep(1000) // 等待 GC 完成
    var after = runtime.malloc_bytes()
    println(after)
    assert(after > 30000)
}


=== test_global_i_gc
--- main.n
import runtime
import co
import libc

int global_i = 0

fn test_break() {
}

fn test_increase(int i):int {
    return i + 1
}

fn car() {
    println('entry car-----------')
    test_break()
    var b = vec_new<int>(0, 1024)
    var c = 111
    var d = vec_new<int>(0, 1024)
    var e = 222
    var f = vec_new<float>(0, 1024)
    var before = runtime.malloc_bytes()
    println(before)
    assert(before > 50000)

    for true {
        global_i = test_increase(global_i)
    }
}

fn bar() {
    test_break()
    var b = vec_new<int>(0, 1024)
    var c = 111
    var d = vec_new<int>(0, 1024)
    var e = 222
    var f = vec_new<float>(0, 1024)
    car()
    var g = b[0] + c + d[0] + e + f[0] as int
}

fn foo() {
    test_break()
    var a1 = 1
    var a2 = 1
    var a3 = 1
    var a4 = 1
    var a5 = 1
    var a6 = 1
    var a7 = 1
    var a8 = 1
    var a9 = 1
    var a10 = 1
    var a11 = 1
    var a12 = 1
    var b = vec_new<int>(0, 1024)
    var c = 111
    var d = vec_new<int>(0, 1024)
    bar()
    var e = 222
    var f = vec_new<float>(0, 1024)
    var g = a1 + a2 + a3 + a4 + a5 + a6 + a7 + a8 + a9 + a10 + a11 + a12 + b[0] + c + d[0] + e + f[0] as int
}

fn main() {
    @async(foo(), 0)
    runtime.gc()

    for int i = 0; i < 10; i += 1 {
        co.sleep(100)
        println(i, " = ", global_i)
    }

    var after = runtime.malloc_bytes()
    println(after)
    assert(after > 30000)
}