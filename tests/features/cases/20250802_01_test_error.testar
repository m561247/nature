=== test_nullable_type
--- main.n
import io

type connable = interface{}

fn main() {
    connable? maybe = null
    println(maybe)
    assert(maybe is null)
}


=== test_json_serialize_any
--- main.n
import http.client
import json
import http

fn test(any b):string! {
    return json.serialize(b)
}

type user_t = struct{
    string email
}

fn main() {
    any u = user_t{email = 'wwhacker@qq.com'}
    var str = json.serialize(u)
    println(str)
}

--- output.txt
{"email":"wwhacker@qq.com"}


=== test_url_encode
--- main.n
import net.url

fn main() {
    var encoded = url.encode("hello world")
    println(encoded)
    assert(encoded == 'hello+world')

    var encoded2 = url.encode("用户名=张三")
    println(encoded2)
    assert(encoded2 == '%E7%94%A8%E6%88%B7%E5%90%8D%3D%E5%BC%A0%E4%B8%89')
}

=== test_rem_div
--- main.n
fn dump(u8 i, u8 rem) {
    println(i, rem)
}

fn test(u8 i, string fill, u8 width):string {
    u8 base = 10
    [u8] result = []
    u8 rem = i % base
    println('rem ->', rem)

    u8 quotient = i / base
    println(quotient)

    return ''
}

fn main() {
    var s = test(12, ' ', 0)

    u8 a = 12
    var b = a * 10
    println(b)
}

--- output.txt
rem -> 2
1
120



=== test_uint_shift_right
--- main.n
fn random_u32(rawptr<u64> state):u32 {
    // xorshift rng: https://en.wikipedia.org/wiki/Xorshift#xorshift.2A
    *state ^= *state >> 12
    *state ^= *state << 25
    *state ^= *state >> 27
    return ((*state * 0x2545F4914F6CDD1D) >> 32) as u32
}

fn random_f32(rawptr<u64> state):f32 {
    // random float32 in [0,1)
    return (random_u32(state) >> 8) as f32 / 16777216.0
}


fn main():void! {
    u64 seed1 = 58494830515472664
    u32 a = random_u32(&seed1)
    println(a)
    assert(a == 2094371595)
}

=== test_octal
--- main.n
fn main() {
    var v = 0o755
    println(v)
    assert(v == 0755)
}

=== test_module_init
--- main.n
import syscall

var seed = syscall.SYS_GETPPID

fn main():void! {
    assert(seed == syscall.SYS_GETPPID)
    println(seed)
}

=== test_module_init2
--- main.n
import time
import syscall

var seed = time.now().timestamp()

fn main():void! {
    assert(seed > 0)
    println(seed)
}

=== test_udiv_urem
--- main.n
fn main():void! {
    u32 base = 10
    u32 i = 3102678087
    u32 rem = i % base
    println(rem)
    assert(rem == 7)

    u32 d = i / base
    println(d)
    assert(d == 310267808)
}
