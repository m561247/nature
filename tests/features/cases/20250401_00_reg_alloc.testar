=== test_resolve_data_flow_change_to_temp_in
--- main.n
fn test(int a) {
    println(a)
}

fn main():void! {
    int kv_dim = 244 // head 分配
    int dim = 12

    for int i = 0; i < dim; i += 2 {
        int rotn = 1
        if i < kv_dim {
            rotn = 2
        }

        for int v = 0; v < rotn; v+=1 {
           test(1)
        }
    }

    test(kv_dim)

    go fn() {
        int a = kv_dim
    }()
}

--- output.txt
1
1
1
1
1
1
1
1
1
1
1
1
244

=== test_ssa_rename_for_resolve_data_flow
--- main.n
fn breakfn() {
}

fn sprintf() {
    var sources = '%d'
    int idx = 0

    for idx < 2 { // i 的值被污染
        idx += 1

        breakfn()

        if sources[idx] == 0 {
            idx = idx + 1
        }

        u8 c = sources[idx]
    }
}

fn main():void! {
    sprintf()
}

--- output.txt
coroutine 'main' panic: 'index out of range [2] with length 2' at nature-test/main.n:13:22

=== test_live_in_phi_not_rename
--- main.n
fn rem(int dividend, int divisor):int! {
	if divisor == 0 {
		throw errorf('divisor cannot zero')
	}

	return dividend % divisor
}

fn test(int result) {
}

fn test2(string msg) {
}

int result = 0

fn main():void! {
    result = rem(10, 0) catch err {
        test2(err.msg())
        1
    }
    test(result)


    result = rem(10, 0)
}

--- output.txt
coroutine 'main' uncaught error: 'divisor cannot zero' at nature-test/main.n:3:34
stack backtrace:
0:	main.rem
		at nature-test/main.n:3:34
1:	main.main
		at nature-test/main.n:25:22
