=== test_end_string

--- main.n
import fmt

fn main():void! {
    var a = 'test\0test'
    println(a.len())

    println('\0'[0])
}

--- output.txt
9
0

=== test_spread_args
--- main.n
fn main():void! {
    [any] list = [true, 1, 'hello']
    println('hello', ...list)
}

--- output.txt
nature-test/main.n:3:11: spread operator '...' requires a function with rest parameters

=== test_vec_struct_access
--- main.n
import time
import fmt

type prob_index_t = struct{
    f32 prob
    int index
}

type pack_t = struct{
    prob_index_t p
}

type warp_t = struct{
    pack_t p
}

fn main():void! {
    var probindex = vec_new<prob_index_t>(prob_index_t{}, 10)

    probindex[0].index = 1
    probindex[0].prob = 3.1314
    println(probindex[0].index, probindex[0].prob)
    assert(probindex[0].index == 1 && probindex[0].prob == 3.1314)

    [prob_index_t;2] arrs = [prob_index_t{}, prob_index_t{}]
    arrs[0].index = 2
    arrs[0].prob = 1.33
    println(arrs[0].index, arrs[0].prob)
    assert(arrs[0].index == 2 && arrs[0].prob == 1.33)

    var (a, b) = (probindex[0].index, arrs[0].index)
    a *= 2
    b *= 2
    println(a, b)
    assert(a == 2 && b == 4)

    [[prob_index_t];5] arrs2 = [
        vec_new<prob_index_t>(prob_index_t{}, 10),
        vec_new<prob_index_t>(prob_index_t{}, 10),
    ]

    arrs2[1][3].index = 3
    arrs2[1][3].prob = 520.1314
    println(arrs2[1][3].index, arrs2[1][3].prob)
    assert(arrs2[1][3].index == 3 && arrs2[1][3].prob == 520.1314)

    vec<[prob_index_t]> vec3 = [
            vec_new<prob_index_t>(prob_index_t{}, 10),
            vec_new<prob_index_t>(prob_index_t{}, 10),
    ]

    vec3[1][3].index = 4
    vec3[1][3].prob = 110.120
    println(vec3[1][3].index, vec3[1][3].prob)
    assert(vec3[1][3].index == 4 && vec3[1][3].prob == 110.120)

    var vec4 = [warp_t{}]
    vec4[0].p.p.index = 5
    vec4[0].p.p.prob = 119.911
    println(vec4[0].p.p.index, vec4[0].p.p.prob)
    assert(vec4[0].p.p.index == 5 && vec4[0].p.p.prob == 119.911)

    var t1 = (prob_index_t{}, prob_index_t{})
    t1[0].index = 6
    t1[0].prob = -333.444
    println(t1[0].index, t1[0].prob)
    assert(t1[0].index == 6 && t1[0].prob == -333.444)
}

=== test_vec_inline
--- main.n
import time
import fmt

fn main():void! {
    var list = [1, 2, 3, 4]
    var a = list[0]
    var b = list[1]
    var c = list[2]
    var d = list[3]
    println(a, b, c, d)

    list[0] = a * 2
    list[1] = b * 2
    list[2] = c * 2
    list[3] =  d * 2
    println(list[0], list[1], list[2], list[3])
}

--- output.txt
1 2 3 4
2 4 6 8


=== test_vec_access_error
--- main.n
fn main():void! {
    var list = [1, 2, 3, 4]
    var d = list[8]
}

--- output.txt
coroutine 'main' panic: 'index out of range [8] with length 4' at nature-test/main.n:3:18

=== test_vec_assign_error
--- main.n
fn main():void! {
    var list = [1, 2, 3, 4]
    list[8] = 12
}

--- output.txt
coroutine 'main' panic: 'index out of range [8] with length 4' at nature-test/main.n:3:16

=== test_catch_vec_assign
--- main.n
fn main():void! {
    var list = [1, 2, 3, 4]
    try {
        list[8] = 12
    } catch e {
        println('catch vec error:', e.msg())
    }
}

--- output.txt
catch vec error: index out of range [8] with length 4

=== test_catch_vec_access
--- main.n
fn main():void! {
    var list = [1, 2, 3, 4]
    var a = list[8] catch e {
        println('catch vec error:', e.msg())
        12
    }
    println(a)
}

--- output.txt
catch vec error: index out of range [8] with length 4
12

=== test_global_vec
--- main.n
var list = [1, 2, 3, 4]

fn main():void! {
    println(list[3])
    list[2] = list[3] * 2
    println(list[2])
}

--- output.txt
4
8

=== test_global_arr
--- main.n
[u8;4] list = [1, 2, 3, 4]

fn main():void! {
    list[2] = list[3] * 2
    println(list[2])
}

--- output.txt
8

=== test_arr
--- main.n
fn main():void! {
    [u8;4] list = [1, 2, 3, 4]
    list[2] = list[3] * 2
    println(list[2])
}

--- output.txt
8

=== test_arr_index
--- main.n
[i8;4] arr1 = [1, 2, 3, 4]

fn main():void! {
    i32 idx = 2
    arr1[idx] = arr1[idx] *2
    println(arr1[idx])

    [i8;4] arr2 = [1, 2, 3, 4]
    u8 uid = 3
    arr1[uid] = arr1[uid] *2
    println(arr1[uid])
}

--- output.txt
6
8

=== test_vec_index
--- main.n
var arr1 = [1, 2, 3, 4]

fn main():void! {
    i32 idx = 2
    arr1[idx] = arr1[idx] *2
    println(arr1[idx])

    vec<i8> arr2 = [1, 2, 3, 4]
    u8 uid = 3
    arr1[uid] = arr1[uid] *2
    println(arr1[uid])
}

--- output.txt
6
8

=== test_struct_field_neg
--- main.n
type test_t = struct{
    float f
    int i
}

fn main():void! {
    var t = test_t{
        f = 3.14,
        i = 3,
    }

    t.f = -t.f
    t.i = - t.i
    println(t.f, t.i)
    assert(t.f == -3.140000 && t.i == -3)
}


=== test_anyptr_binary
--- main.n
fn main():void! {
    anyptr a = 12
    anyptr b = 14
    anyptr c = a * b
    println(c)
    assert(c == 0xa8)
}


=== test_struct_offset_eq_128
--- main.n
import runtime
import co

type test_t = struct{
    vec<int> a
    vec<int> b
}

type trans_t = struct{
    [int;15] t1
    int t2
    int t3
    test_t t4
    ptr<int> t5
}

fn malloc_test(rawptr<test_t> t) {
    t.a = [0;288]
    t.b = [0;288]
}

fn trans_new():ptr<trans_t> {
    var v = new trans_t(t2 = 2, t3= 3, t5 = new int(10))
    malloc_test(&v.t4)
    return v
}

fn main():void! {
    var v = trans_new()
    println(v, &v.t4, &v.t4.a)

    runtime.gc()
    co.sleep(1000)

    println(v.t4.a.len(), v.t4.b.len())
    assert(v.t4.a.len() == 288 && v.t4.b.len() == 288)
}


=== test_div_f32
--- main.n
fn main():void! {
    f32 ss = 1.595615
    f32 size = 5.0

    ss /= size
    assert(ss == 0.319123)

    f64 ss2 = 1.595615
    f64 size2 = 5.0
    ss2 = ss2 / size2
    assert(ss2 == 0.319123)
}


=== test_f32_neg
--- main.n
fn main():void! {
    f64 val = 0.096594
    val = -val
    println(val)
    assert(val == -0.096594)

    f32 val2 = 0.096594
    val2 = -val2
    println(val2)
    assert(val2 == -0.096594)
}

