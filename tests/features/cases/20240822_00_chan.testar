=== test_basic
--- main.n
import co
import runtime

fn main():void! {
    // case 1
    var ch = chan_new<int>()

    go (fn():void!{
        co.sleep(1000)
        int v = ch.recv()
        // assert(v == -233)
        println('[ch] sub co recv success, value =', v)
    })()

    var disturb = fn() {
        for true {
            co.sleep(100)
        }
    }
    go disturb()
    go disturb()

    ch.send(-233)
    println('[ch] send successful')


    // case 2
    var ch_str = chan_new<string>()
    go (fn(chan<string> ch):void!{
        co.sleep(1000)
        ch_str.send('hello channel')
    })(ch_str)

    println('[ch_str] wait recv')
    var str = ch_str.recv()
    println('[ch_str] recv successful', str)
    assert(str == 'hello channel')

    // case 3
    var ch_queue = chan_new<f64>()
    f64 sum = 0

   var consumer1 = fn():void! {
        println('[ch_queue] consumer1 start, p_index =', runtime.processor_index())

        for int i = 0; i < 100; i+=1 {
          var msg = ch_queue.recv()
          println('[ch_queue] consumer1 recv float msg =', i, msg)
          co.sleep(10) // 模拟消息处理的时间
          sum += msg
        }
    }

    var consumer2 = fn():void! {
        println('[ch_queue] consumer2 start, p_index =', runtime.processor_index())

        for int i = 0; i < 100; i+=1 {
          var msg = ch_queue.recv()
          println('[ch_queue] consumer2 recv float msg =', i, msg)
          co.sleep(10) // 模拟消息处理的时间
          sum -= msg
        }
    }

    go consumer1()
    go consumer2()

    co.sleep(100) // 等待 consumer 就绪

    println('[ch_queue] will send, p_index=', runtime.processor_index())
    // 生成 10 个 send
    for int i = 0; i < 50; i+=1 {
        ch_queue.send(i as f64)
    }

    co.sleep(1000)
    println('[ch_queue] send end, sum is', sum)
    assert(sum > -500 && sum < 500)
}

=== test_chan_done[repeat=5]
--- main.n
import co
import time

fn main():void! {
    i64 start = time.now().ms_timestamp()
    int count = 1000
    var done = chan_new<bool>()
    var mockfn = fn(int id):void! {
        co.sleep(1000)

        done.send(true)
    }
    for int i = 0; i < count; i+=1 {
        go mockfn(i)
    }

    for int i = 0; i < count; i+=1 {
        done.recv()
    }
    var end = time.now().ms_timestamp()
    println('done, use time: ', end, start, end - start)
    assert(end - start < 2000)
}

=== test_chan_done2[repeat=200]
--- main.n
import co
import time

fn main():void! {
    i64 start = time.now().ms_timestamp()
    int count = 1000
    var done = chan_new<bool>()
    for int i = 0; i < count; i+=1 {
        go fn(int id):void! {
            co.sleep(100)
            done.send(true)
        }(i)
    }

    for int i = 0; i < count; i+=1 {
        done.recv()
    }

    var end = time.now().ms_timestamp()
    println('done, use time: ', end, start, end - start)
    assert(end - start < 300)
}

=== test_for_chan
--- main.n
import co

fn handle(chan<int> ch) {
    for v in ch {
        println('recv v ->', v)
    }
}

fn main() {
    var ch = chan_new<int>()
    go handle(ch)

    ch.send(1)
    ch.send(3)
    ch.send(5)
    co.sleep(100)
}

--- output.txt
recv v -> 1
recv v -> 3
recv v -> 5
