=== test_basic
--- main.n
import 'mod.n'

fn main() {
    var f = mod.bar_t<int, f32>{
        a = 233,
        b = 333.444,
    }
    int a = @ula(f).dump()

    var f2 = mod.foo_t<f32, bool>{
        a = 233.333,
        b = true,
    }
    var a2 = @ula(f2).dump()


    var f3 = mod.foo_t<bool, string>{
        a = true,
        b = 'hello',
    }
    f3.dump('world')
}

--- mod.n
// 类型约束一致性检查
type foo_t<T:f32|bool|int, U:bool|string|f32|[i32]> = struct{
    T a
    U b
    float c
}

type bar_t<T,U> = struct{
    T a
    U b
}

fn bar_t<T, U>.dump():T {
   println('bar_t any dump', self.a, self.b)
   return self.a
}

fn foo_t<T:f32, U:bool>.dump():T {
    println('f32+bool dump', self.a, self.b)
    return self.a
}

fn foo_t<T:f32|bool, U:string>.dump(U c) {
    println('void return, f32|bool+int|string dump', self.a, self.b, c)
}

--- output.txt
bar_t any dump 233 333.444000
f32+bool dump 233.332993 true
void return, f32|bool+int|string dump true hello world



=== test_constraints_failed1
--- main.n
fn test<T:int>(T param) {
    println(param)
}

fn main() {
    test('hello')
}


--- output.txt
nature-test/main.n:6:14: type 'string' does not match any of the constraints

=== test_constraints_failed2
--- main.n
fn test<T:int|bool|float>(T param) {
    println(param)
}

fn main() {
    test('hello')
}


--- output.txt
nature-test/main.n:6:14: type 'string' does not match any of the constraints

=== test_constraints_failed3
--- main.n
type test_union = int|bool|float

fn test<T:test_union>(T param) {
    println(param)
}

fn main() {
    test('hello')
}

--- output.txt
nature-test/main.n:8:14: type 'string' does not match any of the constraints



=== test_constraints_succ1
--- main.n
fn test<T:int>(T param) {
    println(param)
}

fn main() {
    test(12)
}


--- output.txt
12

=== test_constraints_succ2
--- main.n
fn test<T:int|bool|float>(T param) {
    println(param)
}

fn main() {
    test(true)
}


--- output.txt
true

=== test_constraints_succ3
--- main.n
type test_union = int|bool|float

fn test<T:test_union>(T param) {
    println(param)
}

fn main() {
    test(3.14)
}

--- output.txt
3.140000

=== test_constraints_failed4
--- main.n
type test_union = int|bool|float
type test_union2 = int|string

fn test<T:test_union|test_union2>(T param) {
    println(param)
}

fn main() {
    test(3.14)
}

--- output.txt
nature-test/main.n:4:2: cannot use type 'union' combination

=== test_constraints_failed5
--- main.n
type test_union = int|bool|float
type test_union2 = int|string

fn test<T:test_union&test_union2>(T param) {
    println(param)
}

fn main() {
    test(3.14)
}

--- output.txt
nature-test/main.n:4:2: only type 'interface' can be combination with '&'



=== test_constraints_failed6
--- main.n
type test_interface = interface{}
type test_interface2 = interface{}

fn test<T:test_interface|test_interface2>(T param) {
    println(param)
}

fn main() {
    test(3.14)
}

--- output.txt
nature-test/main.n:4:2: cannot use type 'interface' combination



=== test_type_param_failed1
--- main.n
type test<T:int> = struct{
    T foo
}

fn main() {
    var t = test<string>{
        foo = 'hello',
    }
    println(t.foo)
}


--- output.txt
nature-test/main.n:6:25: type 'string' does not match any of the constraints


=== test_type_param_failed2
--- main.n
type test<T:int> = struct{
    T foo
}

fn main() {
    var t = test{
        foo = 'hello',
    }
    println(t.foo)
}

--- output.txt
nature-test/main.n:6:17: typedef 'main.test' need param

=== test_type_param_failed3
--- main.n
type test<T:int> = struct{
    T foo
}

fn main() {
    var t = test<int>{
        foo = 'hello',
    }
    println(t.foo)
}

--- output.txt
nature-test/main.n:7:19: type inconsistency, expect=int(i64), actual=string

=== test_type_param_succ1
--- main.n
type test<T:int> = struct{
    T foo
}

fn main() {
    var t = test<int>{
        foo = 12,
    }
    println(t.foo)
}

--- output.txt
12



=== test_type_param_failed4
--- main.n
type test_union = int|bool|float

type test<T:test_union> = struct{
    T foo
}

fn main() {
    var t = test<u8>{
        foo = 12,
    }
    println(t.foo)
}

--- output.txt
nature-test/main.n:8:21: type 'u8' does not match any of the constraints

=== test_type_param_succ2
--- main.n
type test_union = int|bool|float

type test<T:test_union> = struct{
    T foo
}

fn main() {
    var t = test<i64>{
        foo = 12,
    }
    println(t.foo)
}

--- output.txt
12



=== test_constraints_interface1
--- main.n
type test_interface = interface{}
type test_interface2 = interface{}

fn test<T:test_interface&test_interface2>(T param) {
    println(param)
}

fn main() {
    test(3.14)
}

--- output.txt
3.140000


=== test_constraints_interface_failed1
--- main.n
type test_interface = interface{
    fn to_string():string
}

type test_emtpy = interface{}

fn test<T:test_interface&test_emtpy>(T param) {
    println(param)
}

fn main() {
    test(3.14)
}

--- output.txt
nature-test/main.n:12:13: type 'f64' not impl 'main.test_interface' interface

=== test_constraints_interface_failed2
--- main.n
type test_interface = interface{
    fn to_string():string
}

type foo_t = struct{}

fn foo_t.to_string():string {
    return 'foo_t'
}

fn test<T:test_interface>(T param) {
    println(param.to_string())
}

fn main() {
    var f = foo_t{}
    test(f)
}

--- output.txt
nature-test/main.n:17:10: type 'main.foo_t' not impl 'main.test_interface' interface

=== test_constraints_interface_succ1
--- main.n
type test_interface = interface{
    fn to_string():string
}

type foo_t:test_interface = struct{}

fn foo_t.to_string():string {
    return 'foo_t'
}

fn test<T:test_interface>(T param) {
    println(@sla(param).to_string())
}

fn main() {
    var f = foo_t{}
    test(f)
}

--- output.txt
foo_t

=== test_type_param_interface_failed1
--- main.n
type test_interface = interface{
    fn to_string():string
}

type foo_t:test_interface = struct{}
fn foo_t.to_string():string {
    return 'foo_t'
}

type bar_t<T:test_interface> = struct{
    T a
}

fn main() {
    var b = bar_t<int>{}
    println(@sla(b.a).to_string())
}

--- output.txt
nature-test/main.n:15:23: type 'int' not impl 'main.test_interface' interface

=== test_constraints_interface_succ2
--- main.n
type test_interface = interface{
    fn to_string():string
}

type foo_t:test_interface = struct{}
fn foo_t.to_string():string {
    return 'foo_t'
}

type bar_t<T:test_interface> = struct{
    T a
}

fn main() {
    var b = bar_t<foo_t>{}
    println(b.a.to_string())
}

--- output.txt
foo_t
