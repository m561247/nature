import libc

type mbedtls_md_context_t = struct{
    anyptr md_info
    anyptr md_ctx
    anyptr hmac_ctx
}

#linkid mbedtls_md5_init
fn mbedtls_md5_init(rawptr<mbedtls_md_context_t> ctx):void

#linkid mbedtls_md_info_from_type
fn mbedtls_md_info_from_type(i32 md_type):anyptr

#linkid mbedtls_md_setup
fn mbedtls_md_setup(rawptr<mbedtls_md_context_t> ctx, anyptr md_info, i32 is_hmac):i32

#linkid mbedtls_md_starts
fn mbedtls_md_starts(rawptr<mbedtls_md_context_t> ctx):i32

#linkid mbedtls_md_update
fn mbedtls_md_update(rawptr<mbedtls_md_context_t> ctx, libc.cstr input, int ilen):i32

#linkid mbedtls_md_finish
fn mbedtls_md_finish(rawptr<mbedtls_md_context_t> ctx, anyptr output):i32

#linkid mbedtls_md_free
fn mbedtls_md_free(rawptr<mbedtls_md_context_t> ctx):void



type mbedtls_sha256_context = struct{
    [u8;64] buffer      // 正在处理的数据块
    [u32;2] total       // 已处理的字节数
    [u32;8] state       // 中间摘要状态
    i32 is224            // 0: 使用 SHA-256, 1: 使用 SHA-224
}

#linkid mbedtls_sha256_init
fn mbedtls_sha256_init(rawptr<mbedtls_sha256_context> ctx):void

#linkid mbedtls_sha256_starts
fn mbedtls_sha256_starts(rawptr<mbedtls_sha256_context> ctx, i32 is224):i32

#linkid mbedtls_sha256_update
fn mbedtls_sha256_update(rawptr<mbedtls_sha256_context> ctx, libc.cstr input, int ilen):i32

#linkid mbedtls_sha256_finish
fn mbedtls_sha256_finish(rawptr<mbedtls_sha256_context> ctx, anyptr output):i32

#linkid mbedtls_sha256_free
fn mbedtls_sha256_free(rawptr<mbedtls_sha256_context> ctx):void

#linkid mbedtls_md_init
fn mbedtls_md_init(rawptr<mbedtls_md_context_t> ctx):void

#linkid mbedtls_md_hmac_starts
fn mbedtls_md_hmac_starts(rawptr<mbedtls_md_context_t> ctx, libc.cstr key, int keylen):i32

#linkid mbedtls_md_hmac_update
fn mbedtls_md_hmac_update(rawptr<mbedtls_md_context_t> ctx, libc.cstr input, int ilen):i32

#linkid mbedtls_md_hmac_finish
fn mbedtls_md_hmac_finish(rawptr<mbedtls_md_context_t> ctx, anyptr output):i32