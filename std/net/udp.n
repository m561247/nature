import strings
import io
import co.types
import net.utils
import libc
import runtime

type addr_t = struct{
    string ip
    int port
}

type socket_t = struct{
    addr_t addr

    anyptr handle
    anyptr bind_co
    anyptr data

    anyptr head
    anyptr tail
    anyptr packet_count

    anyptr buf
    u64 suggested_size

    anyptr write_buf
    anyptr read_buf

    bool recv_start
    bool closed
}

type conn_t:io.reader, io.writer = struct{
    ptr<socket_t> socket
    addr_t remote_addr
}

#linkid rt_uv_udp_bind
fn uv_udp_bind(ptr<socket_t> s):void!

#linkid rt_uv_udp_recvfrom
fn uv_udp_recvfrom(ptr<socket_t> s, [u8] buf, rawptr<addr_t> addr):int!

fn bind(string host):ptr<socket_t>! {
    var (ip, port) = utils.split_host(host)

    var s = new socket_t(addr = addr_t{ip = ip, port=port})
    uv_udp_bind(s)

    return s
}

#linkid rt_uv_udp_close
fn socket_t.close()

fn socket_t.recvfrom([u8] buf):(int, addr_t)! {
    if self.closed {
        throw errorf('socket closed')
    }

    var addr = addr_t{}
    var len = uv_udp_recvfrom(self, buf, &addr)
    return (len, addr)
}

#linkid rt_uv_udp_sendto
fn socket_t.sendto([u8] buf, addr_t addr):int!

fn socket_t.connect(string host):ptr<conn_t>! {
    if self.closed {
        throw errorf('socket closed')
    }

    var (ip, port) = utils.split_host(host)

    var conn = new conn_t(socket = self, remote_addr = addr_t{ip=ip, port=port})
    return conn
}

fn connect(string host):ptr<conn_t>! {
    var s = bind('0.0.0.0:0')
    return s.connect(host)
}

fn conn_t.write([u8] buf):int! {
    if self.socket.closed {
        throw errorf('socket closed')
    }

    return self.socket.sendto(buf, self.remote_addr)
}

fn conn_t.read([u8] buf):int! {
    if self.socket.closed {
        throw errorf('socket closed')
    }

    return self.socket.recvfrom(buf)[0]
}


fn conn_t.close() {
    self.socket.close()
}